Basic Github stuff (add, push, commit, and push steps): https://readwrite.com/2013/10/02/github-for-beginners-part-2/
    - "git push origin <branch>" to push to a particular branch?
    
General article on deploying to Heroku: https://towardsdatascience.com/how-to-deploy-your-dash-app-with-heroku-a4ecd25a6205
    
Dash Deployment Instructions (from main dash site): https://dash.plotly.com/deployment
    - There are 4 files necessary for the app to run
        a) .gitignore
            1. topline of this file says "venv" - I think this just means to put the name of the virtual environment
        b) Procfile
            1. Does "app" in "app:server" refer to the name of the app file?
        c) requirements.txt
            1. Used "pip freeze > requirements.txt" in command line with the virtual env activated to create this
               intially (copied and pasted this later)
        d) <app>.py
            1. Seems like a server variable that references the "app.server" attribute is needed
            
Dash Deployment - Main instructions I've used: https://shravan-kuchkula.github.io/nyc-airbnb-deploy-to-heroku/#8-run-heroku-login

Make changes to an existing app: https://devcenter.heroku.com/articles/git
    - use "heroku git:remote -a <app>" to estalish connection with the app and push changes to it?
    
Miscellaneous notes:
    - Make sure the "app.run_server" code is the ONLY portion that is under the "if __name__ ..." block. I had everything under this
      originally and it kept causing H13 errors when launching because it couldn't find the "server" variable
      

Changing the NotebookApp.iopub_data_rate_limit from 1,000,000 to 10,000,000,000 by using: a) jupyter notebook --NotebookApp.iopub_data_rate_limit=10000000000

  1. Note: As of now, this means that jupyter needs to be launched in this manner everytime i run this
     this code in order to prevent the error. It appears theres away to change the config file though,
     so this can be looked into at another time
Important source: https://stmorse.github.io/journal/espn-fantasy-v3.html

Another solid source here: http://www.gregreda.com/2015/02/15/web-scraping-finding-the-api/

I'll probably need to create a manual mapping between teamId and Team Name since they don't provide a good one in the base URL 
    - Note that this aligns with the order found in the "Members" selection from the "League" drop-down 
    - This will mapping will need to be kept at a season/team level to account teams dropping in and out over time (don't worry about this now though...)

mMatchup view 
    - schedule List (the following represents one element in the list)
        a) home and away Dictionary
            1. 'cumulativeScore' Dictionary
                - Appears to be a score breakdown by stat via the 'scoreByStat' key (returns another dictionary), but it's hard to tell what each of its keys 
                represent
        b) 'gamesPlayed' Integer
            1. Seems like it's supposed to be games played but this is always 0?
        c) 'pointsByScoringPeriod' Dictionary
            1. Current week is the key which returns a float of the score
            2. This is what we're looking for, but 'totalPoints' is more straightforward
        d) 'teamId' Integer *** IMPORTANT KEY ***
            1. This seems to be a float for 'away' and integer for 'home'?
        e) 'totalPoints' Float *** THIS IS THE PRIMARY STAT WE'RE LOOKING FOR ***
            1. points scored in that week
    - Live scoring is available during the current week via 'totalPointsLive' in the home and away dictionaries
        a) Note that this disappears after the week is through
        b) statSourceId = 0 ==> Actual points and statSourceId = 1 ==> Projected points
            
Other parameters to use:
    - "kona_player_info"
    - "proTeamSchedules_wl"
    - "mTeam"
    - "mBoxscore"
    - "mRoster"
    - "mSettings"
    - "kona_player_info"
    - "player_wl"
    - "mSchedule"
    
Simulation source: https://github.com/dmparker0/nflsim 
